{"version":3,"sources":["Components/SearchList/SearchList.js","Components/Card/Card.js","Components/CardList/CardList.js","Container/App/App.js","serviceWorker.js","index.js"],"names":["SearchList","_ref","onSearchChange","react_default","a","createElement","className","onChange","type","placeholder","Card","id","name","email","src","concat","alt","style","width","height","CardList","Robots","map","user","i","Components_Card_Card","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","state","_this2","fetch","then","response","json","filteredRobots","filter","robot","toLowerCase","includes","Components_SearchList_SearchList","Components_CardList_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","Container_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SAYeA,eATI,SAAAC,GAAsB,IAApBC,EAAoBD,EAApBC,eAEjB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SAAOE,SAAUL,EAAgBI,UAAU,cAAcE,KAAK,OAAOC,YAAY,uBCQ9EC,SAZF,SAAAT,GAAuB,IAArBU,EAAqBV,EAArBU,GAAIC,EAAiBX,EAAjBW,KAAMC,EAAWZ,EAAXY,MAErB,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaQ,IAAG,wBAAAC,OAA0BJ,GAAMK,IAAI,cAC/DC,MAAO,CAACC,MAAM,QAASC,OAAO,WAClChB,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQM,IAClCT,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAASO,OCanCO,SAnBE,SAAAnB,GAAc,IAAZoB,EAAYpB,EAAZoB,OAEf,OACIlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAEPe,EAAOC,IAAI,SAACC,EAAMC,GACd,OACIrB,EAAAC,EAAAC,cAACoB,EAAD,CAAMC,IAAKF,EACPb,GAAIa,EACJZ,KAAMW,EAAKX,KACXC,MAAOU,EAAKV,aCyBzBc,cAhCb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOF7B,eAAiB,SAACiC,GAChBP,EAAKQ,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAPpCX,EAAKY,MAAQ,CACXnB,OAAO,GACPgB,YAAY,IAJHT,wEAYL,IAAAa,EAAAV,KACNW,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GACJJ,EAAKL,SAAS,CAACf,OAAOwB,MAGxB,IAAMC,EAAiBf,KAAKS,MAAMnB,OAAO0B,OAAO,SAAAC,GAC9C,OAAOA,EAAMpC,KAAKqC,cAAcC,SAAST,EAAKD,MAAMH,YAAYY,iBAEpE,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,eACAH,EAAAC,EAAAC,cAAC8C,EAAD,CAAYjD,eAAgB6B,KAAK7B,iBACjCC,EAAAC,EAAAC,cAAC+C,EAAD,CAAU/B,OAAQyB,YA5BRO,mBCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.a5a73ca3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchList.css';\r\n\r\nconst SearchList = ({onSearchChange}) => {\r\n\r\n    return (\r\n        <div className=\"searchList\">\r\n            <input onChange={onSearchChange} className=\"search-Text\" type=\"text\" placeholder=\"Search here ...\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchList;\r\n","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({id, name, email}) => {\r\n\r\n    return (\r\n        <div className=\"Card\">\r\n            <img className=\"roboImages\" src={`https://robohash.org/${id}`} alt='robo Images' \r\n                style={{width:'280px', height:'280px'}}/>\r\n            <h3>Name: <span className=\"name\">{name}</span></h3>\r\n            <h4>EmailID: <span className=\"email\">{email}</span></h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../Card/Card';\r\nimport './CardList.css';\r\n\r\nconst CardList = ({Robots}) => {\r\n\r\n    return (\r\n        <div className=\"CardList\">\r\n            {\r\n                Robots.map((user, i) => {\r\n                    return(\r\n                        <Card key={i} \r\n                            id={i}\r\n                            name={user.name}\r\n                            email={user.email}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport SearchList from '../../Components/SearchList/SearchList';\nimport CardList from '../../Components/CardList/CardList';\n\nclass App extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      Robots:[],\n      searchField:''\n    }\n  }\n\n  onSearchChange = (e) => {\n    this.setState({searchField:e.target.value})\n  }\n\n  render(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(json => {\n        this.setState({Robots:json})\n      })\n\n      const filteredRobots = this.state.Robots.filter(robot => {\n        return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n      })\n    return (\n      <div className=\"App\">\n        <h1 className=\"header\">RoboFriends</h1>\n        <SearchList onSearchChange={this.onSearchChange}/>\n        <CardList Robots={filteredRobots}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Container/App/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}